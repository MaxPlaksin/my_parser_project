import telebot
import pandas as pd

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = '7136103155:AAHS8y4z7CsdSpddDddU6p60TM8dTFElXmY'

# === –ó–ê–ì–†–£–ó–ö–ê EXCEL-–ë–ê–ó–´ ===
print("üìÇ –ó–∞–≥—Ä—É–∂–∞—é Excel-—Ñ–∞–π–ª...")
df = pd.read_excel('–û—Å—Ç–∞—Ç–∫–∏ (1).xlsx', sheet_name='TDSheet')
df = df.dropna(subset=['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ê—Ä—Ç–∏–∫—É–ª'])
df = df.astype(str)

# –ß–∏—Å—Ç–∏–º –∞—Ä—Ç–∏–∫—É–ª—ã –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
df['–ê—Ä—Ç–∏–∫—É–ª_clean'] = df['–ê—Ä—Ç–∏–∫—É–ª'].str.replace(" ", "").str.lower()

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# === –ü–û–ò–°–ö –ü–û –ê–†–¢–ò–ö–£–õ–ê–ú ===
import re

def find_best_matches(user_input):
    # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã (5+ —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥, —Å –ø—Ä–æ–±–µ–ª–∞–º–∏)
    raw_matches = re.findall(r'[\d\s]{5,15}', user_input)
    cleaned_inputs = [x.replace(" ", "").lower() for x in raw_matches if len(x.strip()) >= 5]

    if not cleaned_inputs:
        return "‚õîÔ∏è –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª."

    # 2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ—á–∏—â–µ–Ω–Ω–æ–π –±–∞–∑–æ–π
    df['–ê—Ä—Ç–∏–∫—É–ª_clean'] = df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.replace(" ", "").str.lower()
    found_rows = df[df['–ê—Ä—Ç–∏–∫—É–ª_clean'].isin(cleaned_inputs)]

    if found_rows.empty:
        return "‚ùå –ù–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."

    # 3. –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_rows = found_rows.drop_duplicates(subset='–ê—Ä—Ç–∏–∫—É–ª_clean', keep='first')

    results = []
    for _, row in unique_rows.iterrows():
        results.append(
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {row['–ê—Ä—Ç–∏–∫—É–ª']}\n"
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '‚Äî')}\n"
            f"–ö–æ–¥: {row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥', '‚Äî')}\n"
            f"–°–∫–ª–∞–¥: {row.get('–°–∫–ª–∞–¥', '‚Äî')}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: {row.get('–û—Å—Ç–∞—Ç–æ–∫', '‚Äî')}\n"
            f"–¶–µ–Ω–∞: {row.get('–¶–µ–Ω–∞', '‚Äî')} {row.get('–í–∞–ª—é—Ç–∞', '')}\n"
        )

    return "\n".join(results[:10]) + ("\n...–∏ —Ç.–¥." if len(results) > 10 else "")


    found_rows = df[df['–ê—Ä—Ç–∏–∫—É–ª_clean'].isin(cleaned_inputs)]

    if found_rows.empty:
        return "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    unique_rows = found_rows.drop_duplicates(subset='–ê—Ä—Ç–∏–∫—É–ª_clean', keep='first')

    results = []
    for _, row in unique_rows.iterrows():
        results.append(
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {row['–ê—Ä—Ç–∏–∫—É–ª']}\n"
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '‚Äî')}\n"
            f"–ö–æ–¥: {row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥', '‚Äî')}\n"
            f"–°–∫–ª–∞–¥: {row.get('–°–∫–ª–∞–¥', '‚Äî')}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: {row.get('–û—Å—Ç–∞—Ç–æ–∫', '‚Äî')}\n"
            f"–¶–µ–Ω–∞: {row.get('–¶–µ–Ω–∞', '‚Äî')} {row.get('–í–∞–ª—é—Ç–∞', '')}\n"
        )

    return "\n".join(results[:10]) + ("\n...–∏ —Ç.–¥." if len(results) > 10 else "")

# === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_text = message.text
    bot.send_chat_action(message.chat.id, 'typing')
    reply = find_best_matches(user_text)
    bot.reply_to(message, reply)

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∑–∞–ø—Ä–æ—Å—ã...")
bot.polling()
