import telebot
import pandas as pd
import re
import os
import logging
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler("bot_log.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = '7136103155:AAHS8y4z7CsdSpddDddU6p60TM8dTFElXmY'
EXCEL_FILE = '–û—Å—Ç–∞—Ç–∫–∏ (1).xlsx'
SHEET_NAME = 'TDSheet'

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = telebot.TeleBot(TELEGRAM_TOKEN)


# === –ó–ê–ì–†–£–ó–ö–ê EXCEL-–ë–ê–ó–´ ===
def load_database():
    try:
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞—é Excel-—Ñ–∞–π–ª {EXCEL_FILE}...")
        if not os.path.exists(EXCEL_FILE):
            logger.error(f"–§–∞–π–ª {EXCEL_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return None

        df = pd.read_excel(EXCEL_FILE, sheet_name=SHEET_NAME)
        df = df.dropna(subset=['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ê—Ä—Ç–∏–∫—É–ª'])

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∏
        for col in df.columns:
            if df[col].dtype == 'object':
                df[col] = df[col].astype(str)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        df['–ê—Ä—Ç–∏–∫—É–ª_clean'] = df['–ê—Ä—Ç–∏–∫—É–ª'].apply(normalize)

        logger.info(f"‚úÖ –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã: {e}")
        return None


# === –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø ===
def normalize(text):
    if pd.isna(text):
        return ''
    text = str(text).strip()
    text = text.replace('\xa0', '').replace('\u202f', '')  # –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'[\s\-\/]', '', text)  # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —Å–ª—ç—à–∏, —Ç–∏—Ä–µ
    if text.endswith('.0'):
        text = text[:-2]
    return text.lower()


# === –ü–û–ò–°–ö –ü–û –ë–ê–ó–ï ===
def find_best_matches(user_input, df):
    if df is None:
        return "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

    try:
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å—ë, —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª: –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/—Ç–∏—Ä–µ/—Å–ª—ç—à, –æ—Ç 4 —Å–∏–º–≤–æ–ª–æ–≤
        raw_candidates = re.findall(r'[\w\-\/]{4,}', user_input)
        cleaned_inputs = list(set([normalize(x) for x in raw_candidates if x.strip()]))

        if not cleaned_inputs:
            return "‚õîÔ∏è –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞."

        # 2. –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        found_rows = df[df['–ê—Ä—Ç–∏–∫—É–ª_clean'].isin(cleaned_inputs)]

        if found_rows.empty:
            return f"‚ùå –ù–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."

        # 3. –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_rows = found_rows.drop_duplicates(subset='–ê—Ä—Ç–∏–∫—É–ª_clean', keep='first')

        # 4. –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results = []
        for _, row in unique_rows.iterrows():
            price = str(row.get('–¶–µ–Ω–∞', '')).strip()
            currency = str(row.get('–í–∞–ª—é—Ç–∞', '')).strip()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            price_text = "–Ω–µ—Ç" if price.lower() == 'nan' or not price.strip() else f"{price} {currency}".strip()

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ NaN
            def safe_get(row, col, default='‚Äî'):
                val = row.get(col, default)
                return default if str(val).lower() == 'nan' else val

            results.append(
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {row['–ê—Ä—Ç–∏–∫—É–ª']}\n"
                f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {safe_get(row, '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞')}\n"
                f"–ö–æ–¥: {safe_get(row, '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥')}\n"
                f"–°–∫–ª–∞–¥: {safe_get(row, '–°–∫–ª–∞–¥')}\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {safe_get(row, '–û—Å—Ç–∞—Ç–æ–∫')}\n"
                f"–¶–µ–Ω–∞: {price_text}\n"
            )

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_text = "\n".join(results[:20])
        if len(results) > 20:
            result_text += f"\n...–∏ –µ—â—ë {len(results) - 20} –ø–æ–∑–∏—Ü–∏–π"

        return result_text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    help_text = (
        "üîç *–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º –≤ –±–∞–∑–µ.\n"
        "–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ `ABC1234`\n"
        "‚Ä¢ `–ù—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ XYZ-5678`\n"
        "‚Ä¢ `–ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤: ABC1234, DEF5678`\n\n"
        "–ë–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤ –∞—Ä—Ç–∏–∫—É–ª–∞—Ö."
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')


@bot.message_handler(commands=['reload'])
def handle_reload(message):
    bot.send_message(message.chat.id, "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    global df
    df = load_database()
    if df is not None:
        bot.send_message(message.chat.id, f"‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(df)}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")


# === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        user_text = message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.id}: {user_text}")

        bot.send_chat_action(message.chat.id, 'typing')
        reply = find_best_matches(user_text, df)

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(reply) > 4000:
            parts = [reply[i:i + 4000] for i in range(0, len(reply), 4000)]
            for part in parts:
                bot.send_message(message.chat.id, part)
        else:
            bot.reply_to(message, reply)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    df = load_database()

    if df is None:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ë–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∑–∞–ø—Ä–æ—Å—ã...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        bot.polling(non_stop=True, timeout=60, long_polling_timeout=30)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
