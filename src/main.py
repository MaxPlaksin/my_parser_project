import telebot
import pandas as pd
from fuzzywuzzy import fuzz

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = '7136103155:AAHS8y4z7CsdSpddDddU6p60TM8dTFElXmY'  # ‚Üê –¢–≤–æ–π —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞

# === –ó–ê–ì–†–£–ó–ö–ê EXCEL-–ë–ê–ó–´ ===
print("üìÇ –ó–∞–≥—Ä—É–∂–∞—é Excel-—Ñ–∞–π–ª...")
df = pd.read_excel('–û—Å—Ç–∞—Ç–∫–∏ (1).xlsx', sheet_name='TDSheet')
df = df.dropna(subset=['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ê—Ä—Ç–∏–∫—É–ª'])
df = df[['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ê—Ä—Ç–∏–∫—É–ª']].astype(str)

# === –ü–û–î–ì–û–¢–û–í–ö–ê –°–ü–ò–°–ö–û–í ===
nomenclatures = df['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'].tolist()
artikuls = df['–ê—Ä—Ç–∏–∫—É–ª'].tolist()

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM-–ë–û–¢–ê ===
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# === –ü–û–ò–°–ö –ü–û –ë–ê–ó–ï (–ß–Å–¢–ö–ò–ô –ò –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú) ===
def find_best_matches(user_input):
    input_clean = user_input.replace(" ", "").lower()

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª?
    for idx, raw_artikul in enumerate(df['–ê—Ä—Ç–∏–∫—É–ª']):
        artikul_clean = raw_artikul.replace(" ", "").lower()
        if input_clean == artikul_clean:
            name = df.iloc[idx]['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']
            return f"üîé –ù–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª:\n{raw_artikul} ‚Äî {name}"

    # === –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    return "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."


    # === –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É ===
    for idx, raw_artikul in enumerate(df['–ê—Ä—Ç–∏–∫—É–ª']):
        artikul_clean = raw_artikul.replace(" ", "").lower()
        if input_clean == artikul_clean:
            name = df.iloc[idx]['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']
            return f"üîé –ù–∞–π–¥–µ–Ω –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:\n{raw_artikul} ‚Äî {name}"

    # === –ü–æ–∏—Å–∫ –ø–æ —Å–º—ã—Å–ª—É, –∫–∞–∫ —Ä–∞–Ω—å—à–µ ===
    threshold_main = 70
    threshold_partial = 60
    results = []

    for name, artikul in zip(df['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'], df['–ê—Ä—Ç–∏–∫—É–ª']):
        score_full = fuzz.token_set_ratio(user_input.lower(), name.lower())
        if score_full >= threshold_main:
            results.append((artikul, score_full))
        else:
            words = user_input.lower().split()
            for word in words:
                if len(word) < 3:
                    continue
                score_partial = fuzz.partial_ratio(word, name.lower())
                if score_partial >= threshold_partial:
                    results.append((artikul, score_partial))
                    break

    if not results:
        return "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."

    results = list(set(a for a, _ in results))[:30]
    reply = "üîç –ù–∞–π–¥–µ–Ω–æ (–ø–æ–∫–∞–∑–∞–Ω–æ –¥–æ 30 –∞—Ä—Ç–∏–∫—É–ª–æ–≤):\n" + "\n".join(results)
    if len(results) == 30:
        reply += "\n...–≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â—ë, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
    return reply


    results = []

    for name, artikul in zip(nomenclatures, artikuls):
        score_full = fuzz.token_set_ratio(user_input.lower(), name.lower())
        if score_full >= threshold_main:
            results.append((artikul, score_full))
        else:
            words = user_input.lower().split()
            for word in words:
                if len(word) < 3:
                    continue
                score_partial = fuzz.partial_ratio(word, name.lower())
                if score_partial >= threshold_partial:
                    results.append((artikul, score_partial))
                    break

    if not results:
        return "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."

    unique_artikuls = sorted(set(a for a, _ in results))
    max_results = 30  # –º–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–æ–∫
    short_list = unique_artikuls[:max_results]
    reply = "üîç –ù–∞–π–¥–µ–Ω–æ (–ø–æ–∫–∞–∑–∞–Ω–æ –¥–æ 30 –∞—Ä—Ç–∏–∫—É–ª–æ–≤):\n" + "\n".join(short_list)
    if len(unique_artikuls) > max_results:
        reply += f"\n...–∏ –µ—â—ë {len(unique_artikuls) - max_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä—ã—Ç–æ."
    return reply


# === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_text = message.text
    bot.send_chat_action(message.chat.id, 'typing')
    reply = find_best_matches(user_text)
    bot.reply_to(message, reply)

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∑–∞–ø—Ä–æ—Å—ã...")
bot.polling()
