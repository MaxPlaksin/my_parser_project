import telebot
import pandas as pd
import re
import os
import logging
from mail_watcher import run_scheduled_check
import time
from threading import Thread

# === –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler("bot_log.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = '7706134881:AAFuAnYhPM1LcDNK_ZAfhwTINCX6nK34-Co'
EXCEL_FILE = '–¥–ª—è –±–æ—Ç–∞.XLSX'


class BotWrapper:
    def __init__(self, token):
        self.token = token
        self.bot = None
        self._initialize_bot()

    def _initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        max_retries = 3
        retry_delay = 5

        for attempt in range(max_retries):
            try:
                self.bot = telebot.TeleBot(self.token)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                self.bot.get_me()
                logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return True
            except Exception as e:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ - {str(e)}")
                if attempt < max_retries - 1:
                    time.sleep(retry_delay)

        logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω")
        return False

    def polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        while True:
            try:
                logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                self.bot.polling(none_stop=True, interval=3, timeout=60)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
                time.sleep(10)
                continue


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_wrapper = BotWrapper(TELEGRAM_TOKEN)
bot = bot_wrapper.bot if bot_wrapper.bot else None


def normalize(text):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    if pd.isna(text):
        return ''
    text = str(text).strip()
    text = text.replace('\xa0', '').replace('\u202f', '')
    # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    text = re.sub(r'[^\d]', '', text)
    if text.endswith('.0'):
        text = text[:-2]
    return text.lower()


def normalize_with_spaces(text):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    if pd.isna(text):
        return ''
    text = str(text).strip()
    text = text.replace('\xa0', ' ').replace('\u202f', ' ')
    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ –ø—Ä–æ–±–µ–ª–æ–≤) –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'[^\d\s]', ' ', text)
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()
    return text.lower()


def safe_get(row, col, default='‚Äî'):
    val = row.get(col, default)
    return default if str(val).lower() in ['nan', 'none', ''] else val


def load_database():
    try:
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞—é Excel-—Ñ–∞–π–ª {EXCEL_FILE}...")
        if not os.path.exists(EXCEL_FILE):
            logger.error(f"–§–∞–π–ª {EXCEL_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None

        df_local = pd.read_excel(EXCEL_FILE, sheet_name=0)
        df_local = df_local.astype(str)

        # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        df_local['–ê—Ä—Ç–∏–∫—É–ª_clean'] = df_local['–ê—Ä—Ç–∏–∫—É–ª'].apply(normalize)
        df_local['–ê—Ä—Ç–∏–∫—É–ª_with_spaces'] = df_local['–ê—Ä—Ç–∏–∫—É–ª'].apply(normalize_with_spaces)

        logger.info(f"‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(df_local)}")
        return df_local
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã: {e}")
        return None


def find_best_matches(user_input, df_data):
    if df_data is None:
        return "‚ö†Ô∏è –ë–∞–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reload –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

    try:
        lines = user_input.split('\n')
        all_potential_compound_articles = []
        all_potential_simple_articles = []

        for line in lines:
            compound_pattern = r'\b\d{2,5}(?:\s+\d{1,5}){1,3}\b'
            potential_compound_articles = re.findall(compound_pattern, line)
            all_potential_compound_articles.extend(potential_compound_articles)

            simple_pattern = r'\b\d{4,}\b'
            potential_simple_articles = re.findall(simple_pattern, line)
            all_potential_simple_articles.extend(potential_simple_articles)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        normalized_compound = [normalize_with_spaces(c) for c in all_potential_compound_articles]
        for compound in all_potential_compound_articles:
            for part in re.findall(r'\d+', compound):
                if part in all_potential_simple_articles:
                    all_potential_simple_articles.remove(part)

        normalized_simple = [normalize(c) for c in all_potential_simple_articles]
        all_candidates = normalized_simple + normalized_compound

        if not all_candidates:
            return "‚õîÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."

        # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        found_rows = pd.DataFrame()
        found_articles = []
        not_found_articles = []

        for candidate in normalized_compound:
            matches = df_data[df_data['–ê—Ä—Ç–∏–∫—É–ª_with_spaces'] == candidate]
            if not matches.empty:
                found_rows = pd.concat([found_rows, matches])
                found_articles.append(candidate)
            else:
                not_found_articles.append(candidate)

        for candidate in normalized_simple:
            matches = df_data[df_data['–ê—Ä—Ç–∏–∫—É–ª_clean'] == candidate]
            if not matches.empty:
                found_rows = pd.concat([found_rows, matches])
                found_articles.append(candidate)
            else:
                not_found_articles.append(candidate)

        if found_rows.empty:
            return "‚ùå –ù–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."

        unique_rows = found_rows.drop_duplicates(subset='–ê—Ä—Ç–∏–∫—É–ª', keep='first')

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        results = []
        for _, row in unique_rows.iterrows():
            price = safe_get(row, '–¶–µ–Ω–∞', '')
            currency = safe_get(row, '–í–∞–ª—é—Ç–∞', '')
            price_text = "–Ω–µ—Ç" if price.lower() in ['nan', '', 'none'] else f"{price} {currency}".strip()

            results.append(
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {row['–ê—Ä—Ç–∏–∫—É–ª']}\n"
                f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {safe_get(row, '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞')}\n"
                f"–ö–æ–¥: {safe_get(row, '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥')}\n"
                f"–°–∫–ª–∞–¥: {safe_get(row, '–°–∫–ª–∞–¥')}\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {safe_get(row, '–û—Å—Ç–∞—Ç–æ–∫')}\n"
                f"–¶–µ–Ω–∞: {price_text}\n"
            )

        reply = "\n".join(results[:20])
        if len(results) > 20:
            reply += f"\n...–∏ –µ—â—ë {len(results) - 20} –ø–æ–∑–∏—Ü–∏–π"

        if not_found_articles:
            reply += f"\n\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ: {', '.join(not_found_articles)}"

        return reply
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    help_text = (
        "üîç *–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (Excel-–±–∞–∑–∞)*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ ‚Äî –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –≤ –±–∞–∑–µ.\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "`805015`\n"
        "`–≥–¥–µ 805015 –∏ 805017`\n"
        "`–∫–æ–¥ 3546945`\n"
        "`3222 3390 07`\n"
        "`3128 0619 00`\n"
    )
    try:
        bot.send_message(message.chat.id, help_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@bot.message_handler(commands=['reload'])
def handle_reload(message):
    global df
    try:
        bot.send_message(message.chat.id, "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é Excel-–±–∞–∑—É...")
        df = load_database()
        if df is not None:
            bot.send_message(message.chat.id, f"‚úÖ –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(df)}")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel-–±–∞–∑—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã.")


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        user_text = message.text
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.id}: {user_text}")
        bot.send_chat_action(message.chat.id, 'typing')
        reply = find_best_matches(user_text, df)

        for i in range(0, len(reply), 4000):
            try:
                bot.send_message(message.chat.id, reply[i:i + 4000])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        except:
            pass


if __name__ == "__main__":
    if bot:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        mail_thread = Thread(target=run_scheduled_check, daemon=True)
        mail_thread.start()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        df = load_database()

        if df is not None:
            logger.info("‚úÖ Excel-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∑–∞–ø—Ä–æ—Å—ã...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            bot_wrapper.polling()
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
    else:
        logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")