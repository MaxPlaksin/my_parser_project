import telebot
import pandas as pd
import re
import os
import logging
from mail_watcher import run_scheduled_check

# === –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler("bot_log.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = '7136103155:AAHS8y4z7CsdSpddDddU6p60TM8dTFElXmY'
HTML_FILE = '–¥–ª—è –±–æ—Ç–∞ (HTML4).html'

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def normalize(text):
    if pd.isna(text):
        return ''
    text = str(text).strip()
    text = text.replace('\xa0', '').replace('\u202f', '')
    text = re.sub(r'[\s/-]', '', text)
    if text.endswith('.0'):
        text = text[:-2]
    return text.lower()

def safe_get(row, col, default='‚Äî'):
    val = row.get(col, default)
    return default if str(val).lower() in ['nan', 'none', ''] else val

def load_database():
    try:
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞—é HTML-—Ñ–∞–π–ª {HTML_FILE}...")
        if not os.path.exists(HTML_FILE):
            logger.error(f"–§–∞–π–ª {HTML_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None

        tables = pd.read_html(HTML_FILE)
        df_local = tables[0]

        df_local.columns = df_local.iloc[0].map(str).str.strip()
        df_local = df_local.iloc[1:].reset_index(drop=True)
        df_local = df_local.astype(str)
        df_local['–ê—Ä—Ç–∏–∫—É–ª_clean'] = df_local['–ê—Ä—Ç–∏–∫—É–ª'].apply(normalize)

        logger.info(f"‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(df_local)}")
        return df_local
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã: {e}")
        return None

def find_best_matches(user_input, df_data):
    if df_data is None:
        return "‚ö†Ô∏è –ë–∞–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reload –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

    try:
        raw_candidates = re.findall(r'[\w/-]{4,}', user_input)
        cleaned_inputs = list(set([normalize(x) for x in raw_candidates if x.strip()]))

        if not cleaned_inputs:
            return "‚õîÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."

        found_rows = df_data[df_data['–ê—Ä—Ç–∏–∫—É–ª_clean'].isin(cleaned_inputs)]

        if found_rows.empty:
            return "‚ùå –ù–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."

        unique_rows = found_rows.drop_duplicates(subset='–ê—Ä—Ç–∏–∫—É–ª_clean', keep='first')

        results = []
        for _, row in unique_rows.iterrows():
            price = safe_get(row, '–¶–µ–Ω–∞', '')
            currency = safe_get(row, '–í–∞–ª—é—Ç–∞', '')
            price_text = "–Ω–µ—Ç" if price.lower() in ['nan', '', 'none'] else f"{price} {currency}".strip()

            results.append(
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {row['–ê—Ä—Ç–∏–∫—É–ª']}\n"
                f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {safe_get(row, '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞')}\n"
                f"–ö–æ–¥: {safe_get(row, '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥')}\n"
                f"–°–∫–ª–∞–¥: {safe_get(row, '–°–∫–ª–∞–¥')}\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {safe_get(row, '–û—Å—Ç–∞—Ç–æ–∫')}\n"
                f"–¶–µ–Ω–∞: {price_text}\n"
            )

        reply = "\n".join(results[:20])
        if len(results) > 20:
            reply += f"\n...–∏ –µ—â—ë {len(results) - 20} –ø–æ–∑–∏—Ü–∏–π"

        return reply
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    help_text = (
        "üîç *–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (HTML-–±–∞–∑–∞)*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ ‚Äî –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –≤ –±–∞–∑–µ.\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "`805015`\n"
        "`–≥–¥–µ 805015 –∏ 805017`\n"
        "`–∫–æ–¥ 3546945`\n"
        "`2657 2169 13`\n"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(commands=['reload'])
def handle_reload(message):
    global df
    bot.send_message(message.chat.id, "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é HTML-–±–∞–∑—É...")
    df = load_database()
    if df is not None:
        bot.send_message(message.chat.id, f"‚úÖ –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(df)}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HTML-–±–∞–∑—É.")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        user_text = message.text
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.id}: {user_text}")
        bot.send_chat_action(message.chat.id, 'typing')
        reply = find_best_matches(user_text, df)

        for i in range(0, len(reply), 4000):
            bot.send_message(message.chat.id, reply[i:i+4000])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

if __name__ == "__main__":
    run_scheduled_check()
    df = load_database()
    print("‚úÖ HTML-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∑–∞–ø—Ä–æ—Å—ã...")
    try:
        bot.polling(non_stop=True, timeout=60, long_polling_timeout=30)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
