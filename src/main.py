import telebot
import pandas as pd
import re

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = '7136103155:AAHS8y4z7CsdSpddDddU6p60TM8dTFElXmY'

# === –ó–ê–ì–†–£–ó–ö–ê EXCEL-–ë–ê–ó–´ ===
print("üìÇ –ó–∞–≥—Ä—É–∂–∞—é Excel-—Ñ–∞–π–ª...")
df = pd.read_excel('–û—Å—Ç–∞—Ç–∫–∏ (1).xlsx', sheet_name='TDSheet')
df = df.dropna(subset=['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ê—Ä—Ç–∏–∫—É–ª'])
df = df.astype(str)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# === –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø ===
def normalize(text):
    if pd.isna(text):
        return ''
    text = str(text).strip()
    text = text.replace('\xa0', '').replace('\u202f', '')  # –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'[\s\-\/]', '', text)  # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —Å–ª—ç—à–∏, —Ç–∏—Ä–µ
    if text.endswith('.0'):
        text = text[:-2]
    return text.lower()

# === –ü–û–ò–°–ö –ü–û –ë–ê–ó–ï ===
def find_best_matches(user_input):
    keywords = ['–∞—Ä—Ç–∏–∫—É–ª', '–∞—Ä—Ç', '–∫–æ–¥', '–ø–æ–∑', '–ø–æ–∑–∏—Ü–∏—è', '–Ω–æ–º–µ—Ä']
    text = user_input.lower()

    # 1. –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    pattern = r'(' + '|'.join(keywords) + r')\s*[:\-]?\s*([\w\s\-\/]{4,})'
    matches = re.findall(pattern, text)
    cleaned_inputs = [normalize(m[1]) for m in matches if len(m[1].strip()) >= 4]

    # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî fallback: –≤—Å—ë, —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª
    if not cleaned_inputs:
        raw_matches = re.findall(r'[\w\/\-]{4,}', text)
        cleaned_inputs = [normalize(x) for x in raw_matches]

    if not cleaned_inputs:
        return "‚õîÔ∏è –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª."

    # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –±–∞–∑—É
    df['–ê—Ä—Ç–∏–∫—É–ª_clean'] = df['–ê—Ä—Ç–∏–∫—É–ª'].apply(normalize)
    found_rows = df[df['–ê—Ä—Ç–∏–∫—É–ª_clean'].isin(cleaned_inputs)]

    if found_rows.empty:
        return "‚ùå –ù–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."

    # 4. –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_rows = found_rows.drop_duplicates(subset='–ê—Ä—Ç–∏–∫—É–ª_clean', keep='first')

    # 5. –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    results = []
    for _, row in unique_rows.iterrows():
        price = str(row.get('–¶–µ–Ω–∞', '')).strip()
        currency = str(row.get('–í–∞–ª—é—Ç–∞', '')).strip()
        price_text = "–Ω–µ—Ç" if not price or price.lower() == 'nan' else f"{price} {currency}".strip()

        results.append(
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {row['–ê—Ä—Ç–∏–∫—É–ª']}\n"
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '‚Äî')}\n"
            f"–ö–æ–¥: {row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥', '‚Äî')}\n"
            f"–°–∫–ª–∞–¥: {row.get('–°–∫–ª–∞–¥', '‚Äî')}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: {row.get('–û—Å—Ç–∞—Ç–æ–∫', '‚Äî')}\n"
            f"–¶–µ–Ω–∞: {price_text}\n"
        )

    return "\n".join(results[:20]) + ("\n...–∏ —Ç.–¥." if len(results) > 20 else "")

# === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_text = message.text
    bot.send_chat_action(message.chat.id, 'typing')
    reply = find_best_matches(user_text)
    bot.reply_to(message, reply)

# === –ó–ê–ü–£–°–ö ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∑–∞–ø—Ä–æ—Å—ã...")
bot.polling()
