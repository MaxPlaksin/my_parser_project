import imaplib
import email
import os
import zipfile
import logging
from datetime import datetime
import time
import threading
import importlib

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
EMAIL = 'almazgeobur.it@mail.ru'
PASSWORD = 'K7cAiTCjvVn50YiHqdnp'
IMAP_SERVER = 'imap.mail.ru'
SAVE_ZIP_PATH = 'latest_baza.zip'
EXCEL_OUTPUT_PATH = '–û—Å—Ç–∞—Ç–∫–∏2.xlsx'
SENDER_FILTER = '1c@almazgeobur.kz'
CHECK_INTERVAL_MINUTES = 60

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def download_and_extract_latest_zip():
    try:
        logger.info("üì¨ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É...")

        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(EMAIL, PASSWORD)
        mail.select('inbox')

        logger.info("üîé –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞ –æ—Ç '1c@almazgeobur.kz' —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º .xlsx")
        status, messages = mail.search(None, f'FROM "{SENDER_FILTER}"')
        if status != 'OK':
            logger.warning("‚ùå –ü–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return False

        message_ids = messages[0].split()
        if not message_ids:
            logger.warning("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
            return False

        latest_id = message_ids[-1]
        status, msg_data = mail.fetch(latest_id, '(RFC822)')
        if status != 'OK':
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞.")
            return False

        msg = email.message_from_bytes(msg_data[0][1])
        for part in msg.walk():
            if part.get_content_maintype() == 'multipart':
                continue
            if part.get('Content-Disposition') is None:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            filename = part.get_filename()
            if not filename:
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            try:
                if isinstance(filename, bytes):
                    filename = filename.decode('utf-8', errors='replace')
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {e}")

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ: {filename}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel-—Ñ–∞–π–ª–∞
            if filename.lower().endswith('.xlsx'):
                with open(EXCEL_OUTPUT_PATH, 'wb') as f:
                    f.write(part.get_payload(decode=True))
                logger.info(f"üìÑ Excel-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {EXCEL_OUTPUT_PATH}")
                return True

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞
            elif filename.lower().endswith('.zip'):
                with open(SAVE_ZIP_PATH, 'wb') as f:
                    f.write(part.get_payload(decode=True))
                logger.info(f"üì¶ ZIP-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {SAVE_ZIP_PATH}")

                try:
                    with zipfile.ZipFile(SAVE_ZIP_PATH, 'r') as zip_ref:
                        excel_found = False
                        for zip_info in zip_ref.infolist():
                            zip_filename = zip_info.filename
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ
                            try:
                                if isinstance(zip_filename, bytes):
                                    zip_filename = zip_filename.decode('utf-8', errors='replace')
                            except Exception as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ: {e}")

                            if zip_filename.lower().endswith('.xlsx'):
                                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏
                                zip_info.filename = EXCEL_OUTPUT_PATH
                                zip_ref.extract(zip_info, '.')
                                logger.info(f"üìÑ Excel-—Ñ–∞–π–ª –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ ZIP: {EXCEL_OUTPUT_PATH}")
                                excel_found = True
                                break

                        if not excel_found:
                            logger.warning("‚ùó Excel-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ZIP-–∞—Ä—Ö–∏–≤–µ.")
                            return False
                        return True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ ZIP-–∞—Ä—Ö–∏–≤–∞: {e}")
                    return False

        logger.warning("‚ùó –ü–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return False

    except Exception as e:
        error_message = str(e)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        if isinstance(error_message, bytes):
            error_message = error_message.decode('utf-8', errors='replace')
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—á—Ç—ã: {error_message}")
        return False


def run_scheduled_check():
    def loop():
        while True:
            logger.info("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤–æ–π –±–∞–∑—ã...")
            success = download_and_extract_latest_zip()
            if success:
                logger.info("‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...")
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º importlib –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
                    import main
                    importlib.reload(main)
                    main.df = main.load_database()
                    logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(main.df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –Ω–æ–≤–æ–π –±–∞–∑—ã")
                except Exception as ex:
                    error_message = str(ex)
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                    if isinstance(error_message, bytes):
                        error_message = error_message.decode('utf-8', errors='replace')
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ: {error_message}")
            else:
                logger.info("üîÅ –ù–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            time.sleep(CHECK_INTERVAL_MINUTES * 60)

    thread = threading.Thread(target=loop, daemon=True)
    thread.start()


if __name__ == '__main__':
    run_scheduled_check()
    while True:
        time.sleep(60)  # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
