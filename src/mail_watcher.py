import imaplib
import email
import os
import zipfile
import logging
from datetime import datetime
import time
import threading

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
EMAIL = 'almazgeobur.it@mail.ru'
PASSWORD = 'K7cAiTCjvVn50YiHqdnp'
IMAP_SERVER = 'imap.mail.ru'
SAVE_ZIP_PATH = 'latest_baza.zip'
HTML_OUTPUT_PATH = '–¥–ª—è –±–æ—Ç–∞ (HTML4).html'
SENDER_FILTER = '1c@almazgeobur.kz'
SUBJECT_KEYWORD = '–û—Å—Ç–∞—Ç–∫–∏ –±–æ—Ç'
CHECK_INTERVAL_MINUTES = 60  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def download_and_extract_latest_zip():
    try:
        logger.info("üì¨ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É...")

        if os.path.basename(__file__) == 'imaplib.py':
            logger.error("–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º—ë–Ω: –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç, –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è 'imaplib.py'")
            return False

        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(EMAIL, PASSWORD)
        mail.select('inbox')

        logger.info("üîé –ü–æ–∏—Å–∫ –ø–∏—Å—å–º–∞ —Å —Ç–µ–º–æ–π '–û—Å—Ç–∞—Ç–∫–∏ –±–æ—Ç' –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è '1c@almazgeobur.kz'")
        status, messages = mail.search(None, f'FROM "{SENDER_FILTER}" SUBJECT "{SUBJECT_KEYWORD}"')
        if status != 'OK':
            logger.warning("‚ùå –ü–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return False

        message_ids = messages[0].split()
        if not message_ids:
            logger.warning("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")
            return False

        latest_id = message_ids[-1]
        status, msg_data = mail.fetch(latest_id, '(RFC822)')
        if status != 'OK':
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞.")
            return False

        msg = email.message_from_bytes(msg_data[0][1])
        for part in msg.walk():
            if part.get_content_maintype() == 'multipart':
                continue
            if part.get('Content-Disposition') is None:
                continue
            filename = part.get_filename()
            if filename and filename.endswith('.zip'):
                with open(SAVE_ZIP_PATH, 'wb') as f:
                    f.write(part.get_payload(decode=True))
                logger.info(f"üì¶ ZIP-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {SAVE_ZIP_PATH}")

                with zipfile.ZipFile(SAVE_ZIP_PATH, 'r') as zip_ref:
                    for zip_info in zip_ref.infolist():
                        if zip_info.filename.endswith('.html'):
                            zip_info.filename = HTML_OUTPUT_PATH
                            zip_ref.extract(zip_info, '.')
                            logger.info(f"üìÑ HTML-—Ñ–∞–π–ª –∏–∑–≤–ª–µ—á—ë–Ω: {HTML_OUTPUT_PATH}")
                            return True
        logger.warning("‚ùó ZIP –Ω–∞–π–¥–µ–Ω, –Ω–æ HTML –≤–Ω—É—Ç—Ä–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
        return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—á—Ç—ã: {e}")
        return False

def run_scheduled_check():
    def loop():
        while True:
            logger.info("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤–æ–π –±–∞–∑—ã...")
            success = download_and_extract_latest_zip()
            if success:
                logger.info("‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            else:
                logger.info("üîÅ –ù–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            time.sleep(CHECK_INTERVAL_MINUTES * 60)

    thread = threading.Thread(target=loop, daemon=True)
    thread.start()

if __name__ == '__main__':
    run_scheduled_check()
    while True:
        time.sleep(60)  # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
